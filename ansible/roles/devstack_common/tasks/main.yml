---
# tasks file for devstack_common

- name: set nodepool facts
  set_fact:
    nodepool:
      private_ipv4: "{{ hostvars[inventory_hostname]['ansible_facts']['default_ipv4']['address'] }}"
      public_ipv4: "{{ hostvars[inventory_hostname]['ansible_facts']['default_ipv4']['address'] }}"
    zuul:
      executor:
        log_root: /tmp/zuul_logs

- name: manage /etc/hosts
  become: yes
  block:
    - name: Ensure localhost in /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: "^127.0.0.1.*"
        line: "127.0.0.1 localhost"
        state: present

    - name: Ensure hostname does not point to 127.0.*.* in /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: "^127.0.*\\b.*\\s{{ inventory_hostname }}\\b"
        state: absent

    - name: Generate /etc/hosts for all of the nodes
      blockinfile:
        dest: /etc/hosts
        marker: "# {mark} ANSIBLE GENERATED HOSTS"
        block: |
          {% for host in groups['all'] %}
          {{ hostvars[host]['ansible_facts']['default_ipv4']['address'] }} {{ host }}
          {% endfor %}

- name: update common packages debian
  become: yes
  when: ansible_facts.os_family == 'Debian'
  block:
    - name: update apt cache
      apt:
        update_cache: yes

    - name: Install apt packages
      package:
        name: "{{ (debian_pkg_install | join(' ')).split() }}"
        state: present

    - name: remove apt packages
      package:
        name: "{{ (debian_pkg_remove | join(' ')).split() }}"
        state: absent

- name: install common packages debian
  become: yes
  when: ansible_facts.os_family == 'RedHat'
  block:
    - name: Install deltarpm packages
      package:
        name: drpm
        state: present
        update_cache: yes

    - name: Install RPM packages
      package:
        name: "{{ (redhat_pkg_install | join(' ')).split() }}"
        state: present
        update_cache: yes

    - name: remove RPM packages
      package:
        name: "{{ (redhat_pkg_remove | join(' ')).split() }}"
        state: absent

- name: disable firewall
  become: yes
  when: disable_firewall | bool
  block:
    - name: Set firewall default policy
      ufw:
        state: disabled
        policy: allow
      when: ansible_facts.os_family == 'Debian'
      ignore_errors: yes

    - name: Check if firewalld is installed
      command: rpm -q firewalld
      register: firewalld_check
      changed_when: false
      failed_when: firewalld_check.rc > 1
      args:
        warn: false
      when: ansible_facts.os_family == 'RedHat'

    - name: Disable firewalld
      service:
        name: "{{ item }}"
        enabled: false
        state: stopped
      with_items:
        - firewalld
      when:
        - ansible_facts.os_family == 'RedHat'
        - firewalld_check.rc == 0

- name: create stack user as root
  become: yes
  block:
    - name: stack group
      group:
        name: stack
        state: present

    - name: stack user
      user:
        name: stack
        password: "{{ stack_user_password | password_hash('sha512','A512') }}"
        shell: /bin/bash
        group: stack
        state: present

    - name: grant stack user passwordless sudo privileges
      copy:
        dest: /etc/sudoers.d/50_stack_user
        content: |
          stack ALL=(ALL) NOPASSWD:ALL

- name: create repo dir
  become: yes
  ansible.builtin.file:
    path: '{{repo_dir}}'
    state: directory
    mode: '0777'
    owner: stack
    group: stack

- name: clone repos
  become_user: stack
  become: yes
  block:
    - name: download devstack
      ansible.builtin.git:
        repo: 'https://opendev.org/openstack/devstack'
        dest: '{{repo_dir}}/devstack'
        version: '{{devstack_branch}}'

- name: generate stack user ssh key "{{ssh_key_filename}}"
  delegate_to: 127.0.0.1
  openssh_keypair:
    path: "~/.ssh/{{ssh_key_filename}}"
    type: ed25519
    state: present
    force: no

- name: setup ssh keys
  become_user: stack
  become: yes
  block:
    - name: create .ssh dir
      file:
        path: '~/.ssh'
        state: directory
    - name: copy private key
      copy:
        src: "~/.ssh/{{ssh_key_filename}}"
        dest: "~/.ssh/id_ed25519"
    - name: copy public key
      copy:
        src: "~/.ssh/{{ssh_key_filename}}.pub"
        dest: "~/.ssh/id_ed25519.pub"
    - name: Set authorized key
      ansible.posix.authorized_key:
        user: stack
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/{{ssh_key_filename}}.pub') }}"

- name: template ssh config
  become: yes
  template:
    src: "ssh_config"
    dest: "/etc/ssh/ssh_config.d/no-ssh-host-key-checking.conf"

- name: Gather minimum local MTU
  set_fact:
    local_mtu: >
      {% set mtus = [] -%}
      {% for interface in ansible_interfaces -%}
        {% set interface_variable = 'ansible_' + interface -%}
        {% if interface_variable in hostvars[inventory_hostname] -%}
          {% set _ = mtus.append(hostvars[inventory_hostname][interface_variable]['mtu']|int) -%}
        {% endif -%}
      {% endfor -%}
      {{- mtus|min -}}

- name: Calculate external_bridge_mtu
  # 30 bytes is overhead for vxlan (which is greater than GRE
  # allowing us to use either overlay option with this MTU.
  # 40 bytes is overhead for IPv6, which will also support an IPv4 overlay.
  # TODO(andreaf) This should work, but it may have to be reconcilied with
  # the MTU setting used by the multinode setup roles in multinode pre.yaml
  set_fact:
    external_bridge_mtu: "{{ local_mtu | int - 30 - 40 }}"
